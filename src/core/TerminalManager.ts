import { EventBus } from './EventBus';
import { logger } from '../utils/Logger';
import { format } from 'date-fns';
import { randomBytes } from 'crypto';
import * as terminal from 'terminal-kit';

export interface TerminalConfig {
    colors: boolean;
    unicode: boolean;
    grabInput: boolean;
    mouse: boolean;
}

export interface SessionInfo {
    id: string;
    startTime: Date;
    version: string;
    environment: string;
}

export class TerminalManager {
    private readonly term: terminal.Terminal;
    private readonly eventBus: EventBus;
    private readonly config: TerminalConfig;
    private readonly sessionInfo: SessionInfo;
    private readonly terminalLogger = logger.child({ module: 'terminal' });
    private isInputGrabbed: boolean = false;
    private isInitialized: boolean = false;

    constructor(eventBus: EventBus, config: Partial<TerminalConfig> = {}) {
        this.term = terminal.terminal;
        this.eventBus = eventBus;
        this.config = {
            colors: config.colors ?? true,
            unicode: config.unicode ?? true,
            grabInput: config.grabInput ?? true,
            mouse: config.mouse ?? false,
        };

        this.sessionInfo = {
            id: randomBytes(4).toString('hex').toUpperCase(),
            startTime: new Date(),
            version: process.env.npm_package_version || '2.0.0',
            environment: process.env.NODE_ENV || 'development',
        };

        this.terminalLogger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TerminalManager', {
            sessionId: this.sessionInfo.id,
            config: this.config,
        });

        this.setupTerminal();
        this.setupEventListeners();
    }

    private setupTerminal(): void {
        try {
            if (!this.config.colors) {
                this.term.noFormat();
            }

            this.term.on('resize', (width: number, height: number) => {
                this.terminalLogger.debug('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', {
                    width,
                    height,
                    previous: this.getTerminalSize(),
                });
                this.eventBus.emitTyped('terminal:resize', width, height);
            });

            this.terminalLogger.info('–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            this.terminalLogger.errorWithContext(
                error as Error,
                'setupTerminal'
            );
            throw error;
        }
    }

    private setupEventListeners(): void {
        this.eventBus.onTyped('app:start', this.handleAppStart.bind(this));
        this.eventBus.onTyped('app:stop', this.handleAppStop.bind(this));
        this.eventBus.onTyped('terminal:exit', this.handleExit.bind(this));

        this.terminalLogger.debug('Event listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    private handleAppStart(): void {
        this.terminalLogger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è app:start');
        this.showWelcomeScreen();
        this.startKeyListener();
        this.isInitialized = true;
        this.terminalLogger.info('Terminal Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    private handleAppStop(): void {
        this.terminalLogger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è app:stop');
        this.showShutdownMessage();
        this.stopKeyListener();
    }

    private handleExit(): void {
        this.terminalLogger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞');
        this.gracefulShutdown();
    }

    public showWelcomeScreen(): void {
        try {
            this.clearScreen();
            this.drawHeader();
            this.drawSystemInfo();
            this.drawInstructions();
            this.drawStatusLine();

            this.terminalLogger.info('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
        } catch (error) {
            this.terminalLogger.errorWithContext(
                error as Error,
                'showWelcomeScreen'
            );
        }
    }

    public clearScreen(): void {
        this.term.clear();
    }

    private drawHeader(): void {
        const title = 'DTRADER-CRYPTO 2.0';
        const subtitle = '–¢–æ—Ä–≥–æ–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è Gate.io';

        this.term.cyan.bold(
            '\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n'
        );
        this.term.cyan.bold(
            '‚ïë                                                              ‚ïë\n'
        );
        this.term.cyan.bold(`‚ïë${this.centerText(title, 62)}‚ïë\n`);
        this.term.cyan.bold(
            '‚ïë                                                              ‚ïë\n'
        );
        this.term.cyan.bold(`‚ïë${this.centerText(subtitle, 62)}‚ïë\n`);
        this.term.cyan.bold(
            '‚ïë                                                              ‚ïë\n'
        );
        this.term.cyan.bold(
            '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n'
        );
    }

    private drawSystemInfo(): void {
        this.term.yellow(`üì¶ –í–µ—Ä—Å–∏—è: ${this.sessionInfo.version}\n`);
        this.term.yellow(`üåç –°—Ä–µ–¥–∞: ${this.sessionInfo.environment}\n`);
        this.term.yellow(`‚ö° Node.js: ${process.version}\n`);
        this.term.yellow(
            `üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${format(this.sessionInfo.startTime, 'dd.MM.yyyy HH:mm:ss')}\n`
        );
        this.term.yellow(`üÜî ID —Å–µ—Å—Å–∏–∏: ${this.sessionInfo.id}\n\n`);
    }

    private drawStatusLine(): void {
        this.term.green('‚úì –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ').white('–ê–∫—Ç–∏–≤–µ–Ω\n');
        this.term.green('‚úì Event Bus: ').white('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');
        this.term.green('‚úì Logger: ').white('–ù–∞—Å—Ç—Ä–æ–µ–Ω\n');
        this.term.green('‚úì –°–∏—Å—Ç–µ–º–∞: ').white('–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n\n');

        this.term.cyan('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...\n\n');
    }

    private drawInstructions(): void {
        this.term.white.bold('üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n');
        this.term
            .white('‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ')
            .yellow.bold('Ctrl+X')
            .white(' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞\n');
        this.term
            .white('‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ')
            .yellow.bold('Ctrl+C')
            .white(' –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n');
    }

    private startKeyListener(): void {
        if (this.config.grabInput && !this.isInputGrabbed) {
            try {
                this.term.grabInput({ mouse: this.config.mouse });
                this.isInputGrabbed = true;
                this.term.on('key', this.handleKeyPress.bind(this));

                this.terminalLogger.info('–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω–æ');
            } catch (error) {
                this.terminalLogger.errorWithContext(
                    error as Error,
                    'startKeyListener'
                );
            }
        }
    }

    private stopKeyListener(): void {
        if (this.isInputGrabbed) {
            try {
                this.term.grabInput(false);
                this.isInputGrabbed = false;
                this.terminalLogger.info(
                    '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
                );
            } catch (error) {
                this.terminalLogger.errorWithContext(
                    error as Error,
                    'stopKeyListener'
                );
            }
        }
    }

    private handleKeyPress(name: string, matches: any, data: any): void {
        try {
            this.terminalLogger.debug('–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞', {
                keyName: name,
                hasMatches: !!matches,
                dataKeys: data ? Object.keys(data) : [],
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
            if (name === 'CTRL_X' || name === 'CTRL_C') {
                this.terminalLogger.info('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞', {
                    keyName: name,
                });
                this.eventBus.emitTyped('terminal:exit');
                return;
            }

            // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–±—ã—Ç–∏—è –≤ Event Bus
            this.eventBus.emitTyped('terminal:key', name, data);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
            if (this.sessionInfo.environment === 'development') {
                this.showKeyPress(name);
            }
        } catch (error) {
            this.terminalLogger.errorWithContext(
                error as Error,
                'handleKeyPress',
                {
                    keyName: name,
                }
            );
        }
    }

    private showKeyPress(keyName: string): void {
        const timestamp = format(new Date(), 'HH:mm:ss');
        this.term
            .gray(`[${timestamp}] üîò –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: `)
            .white(`${keyName}\n`);
    }

    private showShutdownMessage(): void {
        this.terminalLogger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏');
        this.term.yellow('\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');
        this.term.green('üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...\n');
        this.term.green('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Event Bus...\n');
        this.term.green('üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...\n');
    }

    public gracefulShutdown(): void {
        if (!this.isInitialized) {
            this.terminalLogger.warn(
                '–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'
            );
            process.exit(0);
            return;
        }

        this.terminalLogger.info('–ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
        this.showShutdownMessage();
        this.stopKeyListener();

        this.term.cyan
            .bold('\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ')
            .white.bold('dtrader-crypto 2.0')
            .cyan.bold('!\n');
        this.term.cyan('üöÄ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n');

        setTimeout(() => {
            this.terminalLogger.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
            process.exit(0);
        }, 80);
    }

    public showError(message: string, error?: Error): void {
        this.term.red.bold('\n‚ùå –û—à–∏–±–∫–∞: ').red(message);
        if (error && this.sessionInfo.environment === 'development') {
            this.term.red('\nüìã –î–µ—Ç–∞–ª–∏: ').gray(error.stack || error.message);
        }
        this.term('\n');

        this.terminalLogger.error('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
            message,
            hasErrorDetails: !!error,
        });
    }

    public showSuccess(message: string): void {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê: —É–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π .term()
        this.term.green.bold('‚úÖ ').green(message)('\n');
        this.terminalLogger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞', { message });
    }

    public showInfo(message: string): void {
        this.term.blue.bold('‚ÑπÔ∏è  ').blue(message)('\n');
        this.terminalLogger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
            message,
        });
    }

    public showWarning(message: string): void {
        this.term.yellow.bold('‚ö†Ô∏è  ').yellow(message)('\n');
        this.terminalLogger.warn('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', { message });
    }

    private centerText(text: string, width: number): string {
        const padding = Math.max(0, width - text.length);
        const leftPad = Math.floor(padding / 2);
        const rightPad = padding - leftPad;
        return ' '.repeat(leftPad) + text + ' '.repeat(rightPad);
    }

    public getSessionInfo(): SessionInfo {
        return { ...this.sessionInfo };
    }

    public getTerminalSize(): { width: number; height: number } {
        return {
            width: this.term.width,
            height: this.term.height,
        };
    }

    public isReady(): boolean {
        return this.isInitialized && this.isInputGrabbed;
    }
}
