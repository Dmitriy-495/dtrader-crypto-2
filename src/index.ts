#!/usr/bin/env node

import { EventBus, eventBus } from './core/EventBus';
import { TerminalManager } from './core/TerminalManager';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
interface AppConfig {
    name: string;
    version: string;
    environment: string;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ dtrader-crypto 2.0
 */
class DTraderCrypto {
    private readonly config: AppConfig;
    private readonly eventBus: EventBus;
    private readonly terminalManager: TerminalManager;
    private isRunning: boolean = false;

    constructor(eventBus: EventBus) {
        this.eventBus = eventBus;
        this.config = {
            name: 'dtrader-crypto 2.0',
            version: process.env.npm_package_version || '2.0.0',
            environment: process.env.NODE_ENV || 'development',
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.terminalManager = new TerminalManager(this.eventBus, {
            colors: process.env.TERMINAL_COLORS !== 'false',
            unicode: process.env.TERMINAL_UNICODE !== 'false',
            grabInput: true,
            mouse: false,
        });

        this.setupEventListeners();
        this.setupProcessHandlers();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    private setupEventListeners(): void {
        this.eventBus.onTyped('app:start', this.handleAppStart.bind(this));
        this.eventBus.onTyped('app:stop', this.handleAppStop.bind(this));
        this.eventBus.onTyped('app:error', this.handleAppError.bind(this));
        this.eventBus.onTyped('terminal:exit', this.handleExit.bind(this));
        this.eventBus.onTyped(
            'terminal:key',
            this.handleTerminalKey.bind(this)
        );
        this.eventBus.onTyped(
            'terminal:resize',
            this.handleTerminalResize.bind(this)
        );
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    private setupProcessHandlers(): void {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => {
            this.eventBus.emitTyped('terminal:exit');
        });

        process.on('SIGTERM', () => {
            this.eventBus.emitTyped('terminal:exit');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('uncaughtException', (error: Error) => {
            this.terminalManager.showError('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', error);
            this.gracefulShutdown();
        });

        process.on('unhandledRejection', (reason: unknown) => {
            const error =
                reason instanceof Error ? reason : new Error(String(reason));
            this.terminalManager.showError(
                '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise',
                error
            );
            this.gracefulShutdown();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private handleAppStart(): void {
        this.isRunning = true;
        this.terminalManager.showInfo('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private handleAppStop(): void {
        this.isRunning = false;
        this.terminalManager.showInfo('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private handleAppError(error: Error): void {
        this.terminalManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
     */
    private handleExit(): void {
        this.gracefulShutdown();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     */
    private handleTerminalKey(keyName: string, data: any): void {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (this.config.environment === 'development') {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ TerminalManager
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
     */
    private handleTerminalResize(width: number, height: number): void {
        if (this.config.environment === 'development') {
            this.terminalManager.showInfo(
                `–†–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω: ${width}x${height}`
            );
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    private gracefulShutdown(): void {
        if (!this.isRunning) {
            return;
        }

        this.isRunning = false;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        this.eventBus.emitTyped('app:stop');

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        this.terminalManager.gracefulShutdown();

        // –û—á–∏—Å—Ç–∫–∞ Event Bus
        this.eventBus.cleanup();
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public start(): void {
        try {
            this.terminalManager.showInfo(`–ó–∞–ø—É—Å–∫ ${this.config.name}...`);
            this.eventBus.emitTyped('app:start');
        } catch (error) {
            const err =
                error instanceof Error ? error : new Error(String(error));
            this.eventBus.emitTyped('app:error', err);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public getConfig(): AppConfig {
        return { ...this.config };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public isAppRunning(): boolean {
        return this.isRunning;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function main(): Promise<void> {
    try {
        const app = new DTraderCrypto(eventBus);
        app.start();
    } catch (error) {
        const err = error instanceof Error ? error : new Error(String(error));
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err.message);

        if (process.env.NODE_ENV === 'development') {
            console.error('üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', err.stack);
        }

        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if (require.main === module) {
    main().catch((error) => {
        console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—è
export { DTraderCrypto, EventBus, TerminalManager };
